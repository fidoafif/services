import { ApiModelProperty } from '@nestjs/swagger';
import { IsArray, IsInstance, IsOptional, IsString } from 'class-validator';
import cryptoRandomString = require('crypto-random-string');
import slugify from 'slugify';
import {
  BeforeInsert,
  BeforeUpdate,
  Column,
  Entity,
  getRepository,
  ManyToOne,
  OneToMany,
} from 'typeorm';
import { BaseEntity } from '../base-entity';
import { PlaylistDto } from '../playlist/playlist.dto';
import { Playlist } from '../playlist/playlist.entity';
import { AudioPlaylist } from './audioPlaylist/audioPlaylist.entity';
import { Ebook } from './ebook/ebook.entity';
import { ELessonType } from './lesson.const';

@Entity()
export class Lesson extends BaseEntity {
  @IsString()
  @ApiModelProperty()
  @Column()
  title: string;

  @ApiModelProperty({ readOnly: true })
  @Column({ unique: true, update: false })
  slug: string;

  @IsString()
  @ApiModelProperty({
    description: `Available type [${ELessonType.video}, ${ELessonType.audio}, ${ELessonType.ebook}, ${ELessonType.exam}]`,
  })
  @Column()
  type: ELessonType;

  @IsOptional({ always: true })
  @IsString()
  @ApiModelProperty()
  @Column({ nullable: true, type: 'longtext' })
  description: string;

  @IsOptional({ always: true })
  @IsString()
  @ApiModelProperty()
  @Column({ nullable: true })
  examId: string;

  @IsOptional({ always: true })
  @IsString()
  @ApiModelProperty()
  @Column({ nullable: true })
  contentId: string;

  @IsOptional({ always: true })
  @IsArray()
  @ApiModelProperty()
  @Column({ type: 'simple-array', nullable: true })
  contentIds: string[];

  @IsOptional({ always: true })
  @IsInstance(PlaylistDto)
  @ManyToOne(_ => Playlist, playlist => playlist.lessons, {
    onDelete: 'CASCADE',
  })
  playlist: Playlist;

  @Column()
  playlistId: string;

  @OneToMany(_ => Ebook, ebook => ebook.lesson, {
    onDelete: 'CASCADE',
    nullable: true,
  })
  ebooks: Ebook[];

  @OneToMany(_ => AudioPlaylist, audioPlaylist => audioPlaylist.lesson, {
    onDelete: 'CASCADE',
    nullable: true,
  })
  audioPlaylists: AudioPlaylist[];

  @BeforeInsert()
  protected async beforeInsert(): Promise<void> {
    this.slug = slugify(this.title + '-' + cryptoRandomString({ length: 5 }), {
      replacement: '-',
      remove: /[^\w\-]/g,
      lower: true,
    });

    await this.normalize();
  }

  @BeforeUpdate()
  protected async normalize(): Promise<void> {
    const playlistRepo = await getRepository(Playlist);
    const playlist = await playlistRepo.findOneOrFail({
      slug: this['playlist.slug'],
    });

    this.playlist = playlist;
    this.playlistId = playlist.id;
  }
}
